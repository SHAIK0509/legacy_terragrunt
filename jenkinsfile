pipeline {
    agent any
    environment {
        JENKINS_ENVIRONMENT = "true"
    }

    parameters {
        choice(
            name: 'ENVIRONMENT',
            choices: ['dev', 'stage', 'prod'],
            description: 'Choose environment to deploy'
        )
        booleanParam(
            name: 'AUTO_APPLY',
            defaultValue: false,
            description: 'Auto apply without approval?'
        )
        booleanParam(
            name: 'SKIP_APPLY',
            defaultValue: false,
            description: 'Skip apply stage?'
        )
        booleanParam(
            name: 'DESTROY_INFRA',
            defaultValue: false,
            description: 'Destroy infrastructure?'
        )
        booleanParam(
            name: 'AUTO_DESTROY',
            defaultValue: false,
            description: 'Auto destroy without approval?'
        )
    }

    stages {

        stage('Plan') {
            steps {
                script {
                    def makeDir = "Terragrunt/ec2-terragrunt"
                    echo "Planning Terraform/Terragrunt for ${params.ENVIRONMENT}"
                    sh "cd ${makeDir} && make plan ENV=${params.ENVIRONMENT}"
                }
            }
        }

        stage('Approve Apply') {
            when { expression { return !params.AUTO_APPLY && !params.SKIP_APPLY && !params.DESTROY_INFRA } }
            agent none
            steps {
                timeout(time: 30, unit: 'MINUTES') {
                    input message: "Apply Terragrunt changes to ${params.ENVIRONMENT}?"
                }
            }
        }

        stage('Deploy') {
            when { expression { return !params.SKIP_APPLY && !params.DESTROY_INFRA } }
            steps {
                script {
                    def makeDir = "Terragrunt/ec2-terragrunt"
                    echo "Deploying Terraform/Terragrunt for ${params.ENVIRONMENT}"
                    sh "cd ${makeDir} && make apply ENV=${params.ENVIRONMENT}"
                }
            }
        }

        stage('Destroy Approval') {
            when { expression { return params.DESTROY_INFRA && !params.AUTO_DESTROY } }
            agent none
            steps {
                timeout(time: 30, unit: 'MINUTES') {
                    input message: "Destroy Terragrunt infrastructure for ${params.ENVIRONMENT}?"
                }
            }
        }

        stage('Destroy') {
            when { expression { return params.DESTROY_INFRA } }
            steps {
                script {
                    def makeDir = "Terragrunt/ec2-terragrunt"
                    echo "Destroying Terraform/Terragrunt for ${params.ENVIRONMENT}"
                    sh "cd ${makeDir} && make destroy ENV=${params.ENVIRONMENT}"
                }
            }
        }

        stage('Output') {
            steps {
                script {
                    def makeDir = "Terragrunt/ec2-terragrunt"
                    echo "Fetching outputs for ${params.ENVIRONMENT}"
                    sh "cd ${makeDir} && make output ENV=${params.ENVIRONMENT}"
                }
            }
        }

        stage('Workspace Info') {
            steps {
                script {
                    echo "Current workspace directory:"
                    sh 'pwd'
                    sh 'ls -lR'
                }
            }
        }
    }

    post {
        success {
            echo "✅ Pipeline completed successfully for environment: ${params.ENVIRONMENT}"
        }
        failure {
            echo "❌ Pipeline failed for environment: ${params.ENVIRONMENT}"
        }
    }
}
