pipeline {
    agent any
    environment {
        JENKINS_ENVIRONMENT = "true"
    }

    parameters {
        choice(
            name: 'ENVIRONMENT',
            choices: ['dev', 'stage', 'prod'],
            description: 'Choose environment to deploy'
        )
        booleanParam(
            name: 'AUTO_APPLY',
            defaultValue: false,
            description: 'Auto apply without approval?'
        )
    }

    stages {


        stage('Plan') {
            steps {
                script {
                    def liveDir = "terragrunt/ec2-terragrunt/live/${params.ENVIRONMENT}"
                    echo "Running plan in ${liveDir} for ${params.ENVIRONMENT}"
                    sh "cd ${liveDir} && make plan ENV=${params.ENVIRONMENT}"
                }
            }
        }

        stage('Approve Apply') {
            when { expression { return !params.AUTO_APPLY } }
            steps {
                input message: "Apply Terragrunt changes to ${params.ENVIRONMENT}?"
            }
        }


        stage('Deploy') {
            steps {
                script {
                    def liveDir = "terragrunt/ec2-terragrunt/live/${params.ENVIRONMENT}"
                    echo "Deploying in ${liveDir} for ${params.ENVIRONMENT}"
                    sh "cd ${liveDir} && make apply ENV=${params.ENVIRONMENT}"
                }
            }
        }

        stage('Output') {
            steps {
                script {
                    def liveDir = "terragrunt/ec2-terragrunt/live/${params.ENVIRONMENT}"
                    echo "Fetching outputs from ${liveDir} for ${params.ENVIRONMENT}"
                    sh "cd ${liveDir} && make output ENV=${params.ENVIRONMENT}"
                }
            }
        }


        stage('Workspace Info') {
            steps {
                script {
                    echo "Current workspace directory:"
                    sh 'pwd'
                    echo "Listing files recursively:"
                    sh 'ls -lR'
                }
            }
        }
    }

    post {
        success {
            echo "Pipeline completed successfully for environment: ${params.ENVIRONMENT}"
        }
        failure {
            echo "Pipeline failed for environment: ${params.ENVIRONMENT}"
        }
    }
}
